{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Knowledge Mining Agent Background This project aims to build an AI-powered knowledge mining agent using LangChain. The agent processes and extracts insights from various sources such as YouTube transcripts and Google APIs, storing structured data in a PostgreSQL database for querying and analysis. Goals Develop an agent capable of mining knowledge from multimedia and text sources. Integrate with external APIs for data retrieval. Ensure scalable data storage and retrieval. Challenges Handling diverse data formats from APIs. Optimizing for large-scale data processing and LLM enrichment. Managing costs for API usage and hosting. Journal Initial Setup : Created project structure with Poetry, added dependencies for LangChain, YouTube transcripts, Google API, and PostgreSQL. Agent Skeleton : Implemented basic LangChain agent structure with tools and configuration. Database Integration : Added health check for Supabase PostgreSQL connection. Benchmarks for Project TODO: see what benchmarks are appropriate for this data and application Architecture TODO: justify architecture choices i.e VM sizes, API usage, self hosted services etc Costs TODO: deomonstrate cost estimation for vectorizing + enriching w/ LLM + indexing in search services etc. TODO: hosting costs and expecteded token consumption Custom Evals Fine tuning Processing Methods","title":"Home"},{"location":"#knowledge-mining-agent","text":"","title":"Knowledge Mining Agent"},{"location":"#background","text":"This project aims to build an AI-powered knowledge mining agent using LangChain. The agent processes and extracts insights from various sources such as YouTube transcripts and Google APIs, storing structured data in a PostgreSQL database for querying and analysis.","title":"Background"},{"location":"#goals","text":"Develop an agent capable of mining knowledge from multimedia and text sources. Integrate with external APIs for data retrieval. Ensure scalable data storage and retrieval.","title":"Goals"},{"location":"#challenges","text":"Handling diverse data formats from APIs. Optimizing for large-scale data processing and LLM enrichment. Managing costs for API usage and hosting.","title":"Challenges"},{"location":"#journal","text":"Initial Setup : Created project structure with Poetry, added dependencies for LangChain, YouTube transcripts, Google API, and PostgreSQL. Agent Skeleton : Implemented basic LangChain agent structure with tools and configuration. Database Integration : Added health check for Supabase PostgreSQL connection.","title":"Journal"},{"location":"#benchmarks-for-project","text":"TODO: see what benchmarks are appropriate for this data and application","title":"Benchmarks for Project"},{"location":"#architecture","text":"TODO: justify architecture choices i.e VM sizes, API usage, self hosted services etc","title":"Architecture"},{"location":"#costs","text":"TODO: deomonstrate cost estimation for vectorizing + enriching w/ LLM + indexing in search services etc. TODO: hosting costs and expecteded token consumption","title":"Costs"},{"location":"#custom-evals","text":"","title":"Custom Evals"},{"location":"#fine-tuning","text":"","title":"Fine tuning"},{"location":"#processing-methods","text":"","title":"Processing Methods"},{"location":"api/","text":"API Reference Agent Module KnowledgeMiningAgent A class for the knowledge mining agent. Methods __init__() : Initializes the agent with config, tools, and prompt. run(query: str) : Runs the agent with the given query. Config Module get_config() Returns configuration settings parsed from config.yaml and .env. Tools Module get_tools() Returns a list of tools for the agent. ExampleTool A placeholder tool. Methods _run(query: str) : Processes the query. Prompts Module get_agent_prompt() Returns the prompt template for the agent. Health Check health_check() Performs a health check on the database connection.","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#agent-module","text":"","title":"Agent Module"},{"location":"api/#knowledgeminingagent","text":"A class for the knowledge mining agent.","title":"KnowledgeMiningAgent"},{"location":"api/#methods","text":"__init__() : Initializes the agent with config, tools, and prompt. run(query: str) : Runs the agent with the given query.","title":"Methods"},{"location":"api/#config-module","text":"","title":"Config Module"},{"location":"api/#get_config","text":"Returns configuration settings parsed from config.yaml and .env.","title":"get_config()"},{"location":"api/#tools-module","text":"","title":"Tools Module"},{"location":"api/#get_tools","text":"Returns a list of tools for the agent.","title":"get_tools()"},{"location":"api/#exampletool","text":"A placeholder tool.","title":"ExampleTool"},{"location":"api/#methods_1","text":"_run(query: str) : Processes the query.","title":"Methods"},{"location":"api/#prompts-module","text":"","title":"Prompts Module"},{"location":"api/#get_agent_prompt","text":"Returns the prompt template for the agent.","title":"get_agent_prompt()"},{"location":"api/#health-check","text":"","title":"Health Check"},{"location":"api/#health_check","text":"Performs a health check on the database connection.","title":"health_check()"}]}